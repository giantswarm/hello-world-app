# This workflow publishes documentation from this repository (README.md and docs/ folder content)
# for use in Backstage portals. Only active on public repos. General info:
# https://backstage.io/docs/features/techdocs/
name: Publish TechDocs

on:
  push:
    paths:
      - 'README.md'
      - 'docs/**' # markdown or any images in docs
      - 'helm/**/README.md'
    branches:
      - main
      - master
      - add-techdocs-workflow # TODO: delete

jobs:
  publish:
    if: github.event.repository.visibility == 'public'
    runs-on: 'ubuntu-latest'
    steps:
      - name: Set up NodeJS
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: '22'

      - name: Clone source repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Cache dependencies
        id: cache-npm
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        env:
          cache-name: cache-node-modules
        with:
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          path:
            ./node_modules
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list
      
      - name: Install techdocs-cli
        run: npm install @techdocs/cli

      - name: Show techdocs-cli version
        run: ./node_modules/@techdocs/cli/bin/techdocs-cli --version
      
      - name: Generate mkdocs configuration
        id: generate_mkdocs_config
        shell: python {0}
        run: |
          import os
          import shutil

          pwd = os.getcwd()
          docspath = os.path.join(pwd, "docs")

          output = "site_name: ${{ github.event.repository.name }}\n"
          output += "docs_dir: ./docs\n"
          output += "plugins:\n"
          output += "  - techdocs-code\n"

          os.makedirs(docspath, exist_ok=True)

          # Dict of menu items
          # Key is the relative path and value is the label (or None).
          nav = {}

          # Main README
          if os.path.exists("README.md"):
              print("Copying README.md to docs/_README.md", flush=True)
              shutil.copyfile("README.md", os.path.join(docspath, "_README.md"))
              nav["./_README.md"] = "Main README"

          # Detect helm chart README files
          helmpath = os.path.join(pwd, "helm")
          if os.path.exists(helmpath):
              print(f"Finding README.md files in Helm charts", flush=True)
              for root, _, files in os.walk(helmpath):
                  for f in sorted(files):
                      if f == "README.md":
                          abspath = os.path.join(root, f)
                          relpath = abspath.removeprefix(helmpath)
                          # Copy to docs folder
                          new_filename = "_helm" + relpath.replace("/", "_")
                          target_path = os.path.join(docspath, new_filename)
                          print(f"Copying {abspath} to {target_path}", flush=True)
                          shutil.copyfile(abspath, target_path)
                          nav[f"./{new_filename}"] = f"Helm Chart {os.path.basename(os.path.dirname(abspath))}"

          # Any other markdown in docs folder
          print(f"Finding Markdown (*.md) files in {docspath}", flush=True)
          for root, _, files in os.walk(docspath):
              for f in sorted(files):
                  if not f.endswith(".md"):
                      continue
                  abspath = os.path.join(root, f)
                  relpath = "." + abspath.removeprefix(docspath)
                  if relpath in nav:
                      continue
                  if relpath == "./README.md":
                      nav[relpath] = "Docs Index"
                  else:
                      nav[relpath] = None # Title from content will be applied as label

          if len(nav) == 0:
              print("No markdown files found in docs folder. Exiting.")
              # TODO: write step output
              exit(0)

          output += "nav:\n"
          for key in sorted(nav.keys()):
              if nav[key] is None:
                  output += f"  - '{key}'\n"
              else:
                  output += f"  - '{nav[key]}': '{key}'\n"

          print("\nWriting mkdocs.yml with the following content:\n\n")
          print(output)
          print("\n")

          with open("mkdocs.yml", "w") as f:
              f.write(output)

      
      - name: Generate documentation
        run: |
          $GITHUB_WORKSPACE/node_modules/@techdocs/cli/bin/techdocs-cli \
            generate --output-dir=$GITHUB_WORKSPACE/tmp-docs-output
      
      - name: Show output
        run: ls -la $GITHUB_WORKSPACE/tmp-docs-output
      
      - name: Publish
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TECHDOCS_S3_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TECHDOCS_S3_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-central-1
        run: |
          $GITHUB_WORKSPACE/node_modules/@techdocs/cli/bin/techdocs-cli publish \
            --publisher-type awsS3 \
            --storage-name gs-backstage-techdocs-public \
            --entity default/component/${{ github.event.repository.name }} \
            --directory $GITHUB_WORKSPACE/tmp-docs-output
